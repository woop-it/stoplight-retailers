{
  "openapi": "3.0.2",
  "info": {
    "title": "Woop to retailer",
    "description": "This document contains the technical information about Woop APIs for carriers. For any questions or clarification, please contact the internal technical team.To use \"Woop to Retailer\" APIs, you must use the confidential access codes provided when you created your retailer account on the platform.The version currently available in the documentation is <b>Version 1.7.0</b>",
    "version": "1.7.0"
  },
  "tags": [
    {
      "name": "Order"
    },
    {
      "name": "Collect"
    }
  ],
  "paths": {
    "/orders/{orderId}/carrier": {
      "put": {
        "tags": [
          "Order"
        ],
        "operationId": "putOrderCarrier",
        "description": "This method allows you to receive the name of the selected carrier for a given order.The information is sent when the carrier to deliver the order is chosen. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the information of the selected carrier.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Delivery identifier"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Order reference"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Order identifier"
                  },
                  "trackingUrls": {
                    "$ref": "./models/trackingUrls.yaml"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  },
                  "price": {
                    "$ref": "./models/price.yaml"
                  },
                  "carrier": {
                    "$ref": "#/components/schemas/carrier"
                  },
                  "referenceNumber": {
                    "type": "string",
                    "description": "Order reference"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "trackingUrls",
                  "vehicleType",
                  "price",
                  "carrier",
                  "referenceNumber"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "deliveryId": "string",
                    "externalReference": "string",
                    "orderId": "string",
                    "trackingUrls": {
                      "carrier": "https://tracking.best-carrier.com/XJHSDL541",
                      "woop": {
                        "simple": "https://trace.woopit.fr/t/48aed-b5552d-4da5-813c-00c06e1ff327",
                        "multiple": "https://trace.woopit.fr/m/48aed-b5552d-4da5-813c-00c06e1ff327"
                      }
                    },
                    "vehicleType": "VEHICLE_TYPE_BIKE",
                    "price": {
                      "taxExcludedAmount": 17.2,
                      "taxIncludedAmount": 20.64,
                      "taxAmount": 3.44,
                      "currency": "EUR"
                    },
                    "carrier": {
                      "name": "string",
                      "code": "string",
                      "contact": {
                        "firstName": "string",
                        "lastName": "string",
                        "phone": "string",
                        "email": "string"
                      },
                      "specifications": {
                        "updateOrder": true,
                        "cancelOrder": true,
                        "carrierLabel": true,
                        "storageCapacity": true,
                        "weightMin": {
                          "value": 0,
                          "unit": "mcg"
                        },
                        "weightMax": {
                          "value": 0,
                          "unit": "mcg"
                        },
                        "distanceMax": {
                          "value": 0,
                          "unit": "m"
                        }
                      }
                    },
                    "referenceNumber": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive the selected carrier name for an order"
      }
    },
    "/orders/{orderId}/status": {
      "put": {
        "tags": [
          "Order"
        ],
        "operationId": "putOrderStatus",
        "description": "This method allows the retailer to receive delivery status updates from the carrier for a given order.The retailer can then follow the progress of the delivery in real time. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the updated status information.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/putOrderStatus"
                  },
                  {
                    "$ref": "#/components/schemas/putDeliveryStatus"
                  }
                ]
              },
              "examples": {
                "Statut de commande": {
                  "value": {
                    "orderId": "5z8d4q465zdq65d",
                    "status": "ORDER_CREATED",
                    "date": "2019-11-27T12:00:00+0000"
                  }
                },
                "Statut de livraison": {
                  "value": {
                    "deliveryId": "kzqfq41q561gq5ge1q5",
                    "orderId": "5z8d4q465zdq65d",
                    "status": "DELIVERY_STARTED",
                    "date": "2019-11-27T12:00:00+0000",
                    "comment": "This is a useful comment.",
                    "team": {
                      "members": [
                        {
                          "id": "q6z4qz4dq"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive delivery status updates"
      }
    },
    "/orders/{orderId}/score": {
      "put": {
        "tags": [
          "Order"
        ],
        "operationId": "putOrderScore",
        "description": "This method allows you to receive customer comments following delivery.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the rating information.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "orderId": {
                    "type": "string",
                    "description": "Order identifier"
                  },
                  "score": {
                    "type": "array",
                    "description": "Delivery rating",
                    "items": {
                      "$ref": "#/components/schemas/score"
                    }
                  },
                  "comment": {
                    "type": "array",
                    "description": "Customer comments",
                    "items": {
                      "$ref": "#/components/schemas/scoreComment"
                    }
                  }
                },
                "required": [
                  "orderId",
                  "score",
                  "comment"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "orderId": "54s54z65z4r14e6",
                    "score": [
                      {
                        "note": 9,
                        "type": "SCORE_TYPE_SATISFACTION",
                        "includedInCarrierScore": true
                      }
                    ],
                    "comment": [
                      {
                        "answer": "Non, livraison correcte.",
                        "question": "Do you have any suggestions to share with us to help us improve our delivery service?"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive notes for a delivery"
      }
    },
    "/orders/{orderId}/stops": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Receive delivery stops for an order",
        "operationId": "putOrderStops",
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "description": "List of reasons of issue",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "This method allows you to receive the stops set to a given order.The information is sent when the planning of the order is done.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "orderId": {
                    "type": "string",
                    "description": "Order identifier"
                  },
                  "picking": {
                    "type": "object",
                    "description": "Picking information",
                    "properties": {
                      "stop": {
                        "$ref": "./models/stop.yaml"
                      }
                    },
                    "required": [
                      "stop"
                    ]
                  },
                  "delivery": {
                    "type": "object",
                    "description": "Delivery information",
                    "properties": {
                      "stop": {
                        "$ref": "./models/stop.yaml"
                      }
                    },
                    "required": [
                      "stop"
                    ]
                  }
                },
                "required": [
                  "orderId"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "orderId": "ASDETRF35453",
                    "picking": {
                      "stop": {
                        "references": {
                          "id": "123890654FRTTY"
                        },
                        "sequenceNumber": 7,
                        "route": {
                          "references": {
                            "id": "AAAAAAAA"
                          },
                          "sequenceNumber": 3,
                          "vehicle": {
                            "references": {
                              "id": "65464768568753",
                              "licencePlate": "ZE-678-HD"
                            },
                            "vehicleType": "VEHICLE_TYPE_BIKE"
                          },
                          "team": {
                            "members": [
                              {
                                "id": "AAA"
                              }
                            ]
                          },
                          "planning": {
                            "references": {
                              "id": "POOOOO1"
                            }
                          }
                        },
                        "plannedInterval": {
                          "start": "2019-12-04T12:30:00+0000",
                          "end": "2019-12-04T14:30:00+0000"
                        }
                      }
                    },
                    "delivery": {
                      "stop": {
                        "references": {
                          "id": "123890654FRTTYAAA"
                        },
                        "sequenceNumber": 14,
                        "route": {
                          "references": {
                            "id": "AAAAAAAA"
                          },
                          "sequenceNumber": 3,
                          "vehicle": {
                            "references": {
                              "id": "65464768568753",
                              "licencePlate": "ZE-678-HD"
                            },
                            "vehicleType": "VEHICLE_TYPE_BIKE"
                          },
                          "team": {
                            "members": [
                              {
                                "id": "AAA"
                              }
                            ]
                          },
                          "planning": {
                            "references": {
                              "id": "POOOOO1"
                            }
                          }
                        },
                        "plannedInterval": {
                          "start": "2019-12-04T14:30:00+0000",
                          "end": "2019-12-04T16:30:00+0000"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": "Contains the information of the routes linked to an order."
        },
        "tags": [
          "Order"
        ]
      }
    },
    "/orders/{orderId}/trackingPageUrl": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Receive tracking Page Url for an order",
        "operationId": "putOrderTrackingPageUrl",
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "description": "List of reasons of issue",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "This method allows you to receive the tracking page url set to a given order.The information is sent when the carrier is sending it to Woop.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trackingPageUrl": {
                    "type": "string",
                    "description": "Tracking Page Url",
                    "example": "https://myTrackingPageUrl.com"
                  }
                },
                "required": [
                  "trackingPageUrl"
                ]
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "trackingPageUrl": "https://myTrackingPageUrl.com"
                  }
                }
              }
            }
          },
          "description": "Contains the the tracking page url."
        },
        "tags": [
          "Order"
        ]
      }
    },
    "/orders/{orderId}/deliveryClosure": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "postOrderDeliveryClosure",
        "description": "This method is used to receive billing information for a given delivery.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains billing information.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Delivery identifier"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Order reference"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Order identifier"
                  },
                  "billedDistance": {
                    "$ref": "#/components/schemas/length"
                  },
                  "emittedCarbonDioxide": {
                    "$ref": "#/components/schemas/mass"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "billedDistance",
                  "emittedCarbonDioxide",
                  "vehicleType"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "deliveryId": "654eg65ze4g65z",
                    "externalReference": "564654-FT",
                    "orderId": "a54efa65e4a",
                    "billedDistance": {
                      "value": 56.85,
                      "unit": "m"
                    },
                    "emittedCarbonDioxide": {
                      "value": 12.3,
                      "unit": "g"
                    },
                    "vehicleType": "VEHICLE_TYPE_TRUCK"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive billing information for a delivery"
      }
    },
    "/orders/{orderId}/events": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "postOrderEvents",
        "description": "This method is used to receive events related to an order. All notifications sent to the customer will be forwarded to the retailer: Failure reasons, sent date and content of the notification.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the event information.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "boolean",
                    "description": "Indicates whether the event was correctly sent to the customer"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "EVENT_TYPE_SMS",
                      "EVENT_TYPE_MAIL",
                      "EVENT_TYPE_CALL"
                    ],
                    "description": "Event type"
                  },
                  "date": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Event date"
                  },
                  "subject": {
                    "type": "string",
                    "enum": [
                      "TECHNICAL_DELIVERY_PICKUP_SOON",
                      "DELIVERY_INIT",
                      "DELIVERY_STARTED",
                      "DELIVERY_PICK_UP_REACHED",
                      "DELIVERY_PICK_UP_OK",
                      "DELIVERY_IN_PROGRESS",
                      "DELIVERY_AT_DROP_OF_LOCATION",
                      "DELIVERY_PICK_UP_FAILED",
                      "DELIVERY_DELIVERED_WITH_CLAIM",
                      "DELIVERY_CANCELLED_WITH_RETURN",
                      "DELIVERY_FAILED_WITH_RETURN",
                      "DELIVERY_RETURNED_TO_PICK_UP",
                      "DELIVERY_DELIVERED_OK",
                      "DELIVERY_CANCELLED",
                      "DELIVERY_BLOCKED",
                      "DELIVERY_DELAYED",
                      "DELIVERY_AVAILABLE"
                    ],
                    "description": "Event subject"
                  },
                  "message": {
                    "type": "string",
                    "description": "Message sent to the customer"
                  },
                  "failReason": {
                    "type": "string",
                    "description": "Reason for failure if status is false"
                  },
                  "sender": {
                    "type": "string",
                    "description": "Sender"
                  }
                },
                "required": [
                  "status",
                  "type",
                  "date",
                  "subject",
                  "message",
                  "sender"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "status": true,
                    "type": "EVENT_TYPE_MAIL",
                    "date": "2019-11-27T12:00:00+0000",
                    "subject": "DELIVERY_DELAYED",
                    "message": "I will be 15 minutes late.",
                    "sender": "sender@mail.fr"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "statusCode": 0,
                      "error": "string",
                      "message": "string",
                      "reasons": [
                        "STORE_NOT_FOUND"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The 'orderId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {
                  "example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive events for a command"
      }
    },
    "/orders/{orderId}/deltaCosts": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Receive extracost from carrier",
        "operationId": "postOrderDeltaCosts",
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "This method allows you to receive the deltaCost information issued by the carrier for the order during delivery. This data can be of type; Additional costs and/or discount for the delivery. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Delivery identifier"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Order reference"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Order identifier"
                  },
                  "reason": {
                    "$ref": "#/components/schemas/deltaCostReason"
                  },
                  "comment": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Additional comment left by the carrier. "
                  },
                  "date": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Date of the recorded event."
                  },
                  "": {
                    "$ref": "./models/price.yaml"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "reason",
                  "comment",
                  "date",
                  ""
                ]
              },
              "examples": {
                "Late cancellation": {
                  "value": {
                    "deliveryId": "056d12bb-7b53-46b8-980e-2c430fd9b4d3",
                    "externalReference": "056d12bb-7b53-46b8-980e-2c430fd9b4d3",
                    "orderId": "1d0297b0-be4e-409f-8179-b253",
                    "taxExcludedAmount": 165.98,
                    "currency": "EUR",
                    "reason": "DELTACOST_LATE_CANCELLATION",
                    "comment": "Order cancelled 5 mins before delivery.",
                    "date": "2019-11-27T10:30:00+0000"
                  }
                }
              }
            }
          },
          "description": "Contains deltaCosts information. "
        },
        "tags": [
          "Order"
        ]
      }
    },
    "/orders/{orderId}/quotes": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Receive all quotes for an order",
        "operationId": "postOrderQuotes",
        "responses": {
          "200": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "string",
                      "example": "Missing argument 'xxxxx'"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "This method allows you to receive all quotes issued to carriers for the creation of a delivery. Quotes will be returned to the retailer for information purposes. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "",
                "minItems": 1,
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/getQuote"
                }
              },
              "examples": {
                "example": {
                  "value": [
                    {
                      "quoteId": "string",
                      "price": {
                        "taxExcludedAmount": 10,
                        "currency": "EUR"
                      },
                      "vehicleType": "VEHICLE_TYPE_BIKE",
                      "carrierName": "string",
                      "reasons": [
                        "REFUSED_TOO_HEAVY"
                      ],
                      "comment": "string"
                    }
                  ]
                }
              }
            }
          },
          "description": "Contains the carrier quote information."
        },
        "tags": [
          "Order"
        ]
      }
    },
    "/collects/{collectId}/status": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "collectId",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Receive collect status updates",
        "operationId": "put-collects-collectId-status",
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing and/or incorrect items in the body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Information can no longer be sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "The 'collectId' was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.json#/components/schemas/errorCode"
                }
              }
            }
          }
        },
        "description": "This method allows the retailer to receive status information on the Click & Collect order. The retailer can then monitor progress of the customer collection in real time . ",
        "parameters": [],
        "tags": [
          "Collect"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "collectId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "date": {
                    "type": "string",
                    "minLength": 1,
                    "format": "date-time"
                  },
                  "status": {
                    "$ref": "./retailer_to_woop.json#/components/schemas/collectStatus"
                  },
                  "slot": {
                    "$ref": "./retailer_to_woop.json#/components/schemas/slot"
                  },
                  "urls": {
                    "$ref": "./models/collect/urls.yaml"
                  },
                  "additionalData": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/additionalData"
                    }
                  }
                },
                "required": [
                  "collectId",
                  "date",
                  "status"
                ]
              },
              "examples": {
                "Créneau validé": {
                  "value": {
                    "collectId": "CN123456789FR59",
                    "date": "2019-08-24T14:15:22Z",
                    "status": "COLLECT_STARTED",
                    "slot": {
                      "start": "2019-05-02T15:00:00+0000",
                      "end": "2019-05-02T15:30:00+0000"
                    }
                  }
                },
                "Créneau modifié par le client": {
                  "value": {
                    "collectId": "CN123456789FR59",
                    "date": "2019-08-24T14:15:22Z",
                    "status": "COLLECT_REPLANNED",
                    "slot": {
                      "start": "2019-05-02T15:00:00+0000",
                      "end": "2019-05-02T15:30:00+0000"
                    }
                  }
                },
                "Client arrivé en magasin": {
                  "value": {
                    "collectId": "CN123456789FR59",
                    "date": "2019-08-24T14:15:22Z",
                    "status": "COLLECT_AWAITING",
                    "slot": {
                      "start": "2019-05-02T15:00:00+0000",
                      "end": "2019-05-02T15:30:00+0000"
                    },
                    "additionalData": [
                      {
                        "key": "space",
                        "value": "A32"
                      }
                    ]
                  }
                }
              }
            }
          },
          "description": "Contains the updated status information."
        }
      }
    },
    "/bookings/{bookingId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "bookingId",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Receive delete booking",
        "operationId": "delete-collect",
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "Collect"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "score": {
        "title": "Delivery rating (score)",
        "type": "object",
        "x-examples": {
          "Example": {
            "note": 5,
            "type": "SCORE_TYPE_RECOMMENDATION",
            "includedInCarrierScore": true
          }
        },
        "description": "Specifies the rating for the delivery given by the end customer and if it is included in the calculation of the carrier rating. ",
        "properties": {
          "note": {
            "type": "number",
            "description": "Rating"
          },
          "type": {
            "type": "string",
            "enum": [
              "SCORE_TYPE_RECOMMENDATION",
              "SCORE_TYPE_SATISFACTION"
            ],
            "description": "Rating type"
          },
          "includedInCarrierScore": {
            "type": "boolean",
            "description": "Included in the carrier rating"
          }
        },
        "required": [
          "note",
          "type",
          "includedInCarrierScore"
        ]
      },
      "contact": {
        "title": "Contact (contact)",
        "type": "object",
        "x-examples": {
          "Example": {
            "firstName": "John",
            "lastName": "Doe",
            "phone": "+33610101010",
            "email": "johndoe@mail.com"
          }
        },
        "description": "Delivery/collection contact information.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "phone": {
            "type": "string",
            "description": "Telephone"
          },
          "email": {
            "type": "string",
            "description": "Email"
          }
        },
        "required": [
          "phone",
          "email"
        ]
      },
      "orderStatus": {
        "type": "string",
        "enum": [
          "ORDER_CREATED",
          "ORDER_UPDATED",
          "ORDER_TO_BE_COMPLETED",
          "ORDER_WITH_NO_CARRIER_ELIGIBLE",
          "ORDER_TO_BE_QUOTED",
          "ORDER_QUOTED",
          "ORDER_WITH_NO_QUOTE",
          "ORDER_QUOTE_TO_BE_CONFIRMED",
          "ORDER_TO_BE_SENT_TO_CARRIER",
          "ORDER_WITH_NO_CARRIER_AVAILABLE",
          "ORDER_REFUSED_DELIVERY",
          "ORDER_TO_DELIVER",
          "ORDER_BEING_DELIVERED",
          "ORDER_DELIVERY_UNCOMPLETED",
          "ORDER_DELIVERED",
          "ORDER_CANCELLED"
        ],
        "title": "Order status (orderStatus)",
        "description": "Specifies the order status.",
        "x-examples": {
          "Example": "ORDER_CREATED"
        }
      },
      "length": {
        "title": "Dimension (length)",
        "x-examples": {
          "Example": {
            "value": 200,
            "unit": "mm"
          }
        },
        "type": "object",
        "description": "Specifies the size of a package.",
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/lengthUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "mass": {
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnit"
          }
        },
        "title": "Weight (mass)",
        "x-examples": {
          "Example": {
            "value": 1,
            "unit": "kg"
          }
        },
        "description": "Specifies the weight of a package/product."
      },
      "lengthUnit": {
        "type": "string",
        "description": "Specifies the unit of measurement for the dimensions.",
        "enum": [
          "mm",
          "cm",
          "m",
          "in",
          "ft-us",
          "ft",
          "mi"
        ],
        "title": "Unit of measurement (lengthUnit)",
        "x-examples": {
          "Example": "mm"
        }
      },
      "massUnit": {
        "description": "Specifies the unit of weight.",
        "enum": [
          "mcg",
          "mg",
          "g",
          "kg",
          "oz",
          "lb",
          "mt",
          "t"
        ],
        "title": "Unit of weight (massUnits)",
        "x-examples": {
          "Example": "mcg"
        },
        "type": "string"
      },
      "vehicleType": {
        "type": "string",
        "enum": [
          "VEHICLE_TYPE_BIKE",
          "VEHICLE_TYPE_SCOOTER",
          "VEHICLE_TYPE_E_SCOOTER",
          "VEHICLE_TYPE_VAN_SMALL",
          "VEHICLE_TYPE_E_VAN_SMALL",
          "VEHICLE_TYPE_VAN_MEDIUM",
          "VEHICLE_TYPE_PEDESTRIAN",
          "VEHICLE_TYPE_TRUCK",
          "VEHICLE_TYPE_VAN_BIG",
          "VEHICLE_TYPE_E_VAN_BIG",
          "VEHICLE_TYPE_BIKE_CARGO",
          "VEHICLE_TYPE_CAR",
          "VEHICLE_TYPE_E_CAR",
          "VEHICLE_TYPE_UNKNOWN",
          "VEHICLE_TYPE_GAZ_VAN_BIG",
          "VEHICLE_TYPE_GAZ_VAN_MEDIUM"
        ],
        "title": "Type of carrier vehicle (vehicleType)",
        "x-examples": {
          "Example": "VEHICLE_TYPE_BIKE"
        },
        "description": "Specifies the type of vehicle used for the delivery. "
      },
      "team": {
        "type": "object",
        "title": "Team (team)",
        "x-examples": {
          "Example": {
            "members": [
              {
                "id": "176867"
              }
            ]
          }
        },
        "description": "Information from the delivery team.",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "AAA"
                }
              }
            }
          }
        }
      },
      "carrier": {
        "title": "Carrier (carrier)",
        "x-examples": {
          "Example": {
            "name": "Bpost",
            "code": "bpost",
            "contact": {
              "firstName": "John",
              "lastName": "Doe",
              "phone": "+33610101010",
              "email": "johndoe@mail.com"
            },
            "specifications": {
              "updateOrder": true,
              "cancelOrder": false,
              "carrierLabel": true,
              "storageCapacity": true,
              "weightMin": {
                "value": 5,
                "unit": "kg"
              },
              "weightMax": {
                "value": 50,
                "unit": "kg"
              },
              "ditanceMax": {
                "value": 5,
                "unit": "km"
              }
            }
          }
        },
        "type": "object",
        "description": "Specifies the carrier information.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier name"
          },
          "code": {
            "type": "string",
            "description": "Carrier code"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "specifications": {
            "$ref": "#/components/schemas/specifications"
          }
        },
        "required": [
          "name",
          "code",
          "contact",
          "specifications"
        ]
      },
      "putDeliveryStatus": {
        "title": "Update of the delivery status (putDeliveryStatus)",
        "type": "object",
        "description": "Update of the delivery status.",
        "properties": {
          "deliveryId": {
            "type": "string",
            "description": "Delivery identifier"
          },
          "orderId": {
            "type": "string",
            "description": "Order identifier"
          },
          "status": {
            "$ref": "./models/status.yaml"
          },
          "subStatus": {
            "$ref": "./models/subStatus.yaml"
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "description": "Modification date"
          },
          "comment": {
            "type": "string",
            "description": "Additional comment"
          },
          "team": {
            "$ref": "#/components/schemas/team"
          },
          "additionalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/additionalData"
            }
          },
          "appointment": {
            "$ref": "#/components/schemas/appointment"
          }
        },
        "required": [
          "deliveryId",
          "orderId",
          "status",
          "date",
          "comment"
        ]
      },
      "putOrderStatus": {
        "title": "Update of the order status (putOrderStatus)",
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order identifier"
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "description": "Date of the update"
          },
          "status": {
            "$ref": "#/components/schemas/orderStatus"
          }
        },
        "required": [
          "orderId",
          "date",
          "status"
        ],
        "description": "Update of the order status.",
        "x-examples": {
          "example": {
            "orderId": "string",
            "date": "string",
            "status": "ORDER_CREATED"
          }
        }
      },
      "additionalData": {
        "title": "Additional data (additionalData)",
        "type": "object",
        "description": "Allows you to receive personalised information/data from the carrier.",
        "properties": {
          "key": {
            "type": "string",
            "description": "Title of the information received"
          },
          "value": {
            "type": "string",
            "description": "Value of the information transmitted"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "x-examples": {
          "example": {
            "key": "string",
            "value": "string"
          }
        }
      },
      "appointment": {
        "description": "Specifies a range of dates and times for customer appointments.",
        "type": "object",
        "x-examples": {
          "example": {
            "start": "2019-05-02T15:52:01+0000",
            "end": "2019-05-02T17:52:01+0000"
          }
        },
        "properties": {
          "start": {
            "type": "string",
            "minLength": 1,
            "description": "Start of the time slot"
          },
          "end": {
            "type": "string",
            "minLength": 1,
            "description": "End of the time slot"
          }
        },
        "required": [
          "start",
          "end"
        ],
        "title": "Appointment date (appointment)"
      },
      "specifications": {
        "description": "List of specifications recorded for a carrier on an order.",
        "type": "object",
        "x-examples": {
          "example": {
            "updateOrder": true,
            "cancelOrder": true,
            "carrierLabel": true,
            "storageCapacity": true,
            "weightMin": {
              "value": 0,
              "unit": "string"
            },
            "weightMax": {
              "value": 0,
              "unit": "string"
            },
            "ditanceMax": {
              "value": 0,
              "unit": "string"
            }
          }
        },
        "title": "Specifications (specifications)",
        "properties": {
          "updateOrder": {
            "type": "boolean",
            "description": "Indicates whether the order update is allowed"
          },
          "cancelOrder": {
            "type": "boolean",
            "description": "Indicates whether the order cancellation is allowed"
          },
          "carrierLabel": {
            "type": "boolean",
            "description": "Indicates whether the carrier has a carrier label"
          },
          "storageCapacity": {
            "type": "boolean",
            "description": "Indicates whether the carrier has storage capacity"
          },
          "weightMin": {
            "$ref": "#/components/schemas/weight"
          },
          "weightMax": {
            "$ref": "#/components/schemas/weight"
          },
          "distanceMax": {
            "$ref": "#/components/schemas/distance"
          }
        },
        "required": [
          "updateOrder",
          "cancelOrder",
          "carrierLabel",
          "storageCapacity",
          "weightMin",
          "weightMax",
          "distanceMax"
        ]
      },
      "weight": {
        "description": "Specifies the weight allowance",
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ],
        "x-examples": {
          "example": {
            "value": 5,
            "unit": "kg"
          }
        },
        "title": "Weight (weight)"
      },
      "distance": {
        "description": "Specifies the distance between two points.",
        "type": "object",
        "x-examples": {
          "Example": {
            "value": 5,
            "unit": "km"
          }
        },
        "title": "Distance (distance)",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/distanceUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "distanceUnit": {
        "type": "string",
        "title": "Unit of distance (distanceUnit)",
        "x-examples": {
          "Example": "string"
        },
        "description": "Specifies the unit of measurement for the distance calculation.",
        "enum": [
          "m",
          "km"
        ]
      },
      "deltaCostReason": {
        "type": "string",
        "title": "Reason for deltaCost (deltaCostReason)",
        "description": "Specifies the reason reported by the carrier for creating a deltaCost on an order.  ",
        "x-examples": {
          "example": "DELTACOST_EXTEND_WAITING_WAREHOUSE"
        },
        "enum": [
          "DELTACOST_EXTEND_WAITING_WAREHOUSE",
          "DELTACOST_EXTEND_WAITING_CUSTOMER",
          "DELTACOST_WRONG_FLOOR",
          "DELTACOST_WRONG_CONTENT",
          "DELTACOST_WAREHOUSE_RETURN",
          "DELTACOST_LATE_CANCELLATION",
          "DELTACOST_PICKUP_FAILED",
          "DELTACOST_PARTIALLY_DELIVERED",
          "DELTACOST_UNKNOWN"
        ]
      },
      "getQuote": {
        "description": "All quotes issued by the carriers when requesting the creation of an order. ",
        "type": "object",
        "x-examples": {
          "example": {
            "quoteId": "string",
            "price": {
              "taxExcludedAmount": 10,
              "currency": "EUR"
            },
            "vehicleType": "string",
            "carrierName": "string",
            "reasons": [
              "REFUSED_TOO_HEAVY"
            ],
            "comment": "string"
          }
        },
        "title": "Information on the carrier quotes (getQuote)",
        "properties": {
          "quoteId": {
            "type": "string",
            "minLength": 1,
            "description": "For a refused quote the value is equal to \"-1\""
          },
          "price": {
            "$ref": "./models/price.yaml"
          },
          "vehicleType": {
            "$ref": "#/components/schemas/vehicleType"
          },
          "carrierName": {
            "type": "string",
            "minLength": 1
          },
          "reasons": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/refusedReason"
            }
          },
          "comment": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "quoteId",
          "price",
          "carrierName"
        ]
      },
      "refusedReason": {
        "type": "string",
        "title": "Reason for refusal (refusedReason)",
        "description": "Specifies the possible reasons for refusal of a quote. ",
        "x-examples": {
          "example": "REFUSED_AREA"
        },
        "enum": [
          "REFUSED_AREA",
          "REFUSED_AVAILABILITY",
          "REFUSED_DAY_OFF",
          "REFUSED_EXCEPTION",
          "REFUSED_TIME_NOT_WORKED",
          "REFUSED_TOO_HEAVY",
          "REFUSED_TOO_LARGE"
        ]
      },
      "scoreComment": {
        "title": "Comments on the delivery (scoreComment)",
        "type": "object",
        "x-examples": {
          "Example": {
            "answer": "No comment !",
            "question": "Do you have any suggestions to share with us to help us improve our delivery service?"
          }
        },
        "description": "Additional field for customer comments",
        "properties": {
          "answer": {
            "type": "string",
            "description": "Response by the end customer"
          },
          "question": {
            "type": "string",
            "description": "Question for the end customer"
          }
        },
        "required": [
          "answer",
          "question"
        ]
      }
    },
    "parameters": {
      "pathOrderId": {
        "in": "path",
        "description": "Order identifier",
        "name": "orderId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "servers": []
}