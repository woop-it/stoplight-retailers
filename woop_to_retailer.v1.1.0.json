{
  "openapi": "3.0.2",
  "info": {
    "title": "Woop to Retailer",
    "description": "First, all informations about Woop API headed to retailers are centralized in this documentation. If you need precisions or have any questions, please contact internal technical team.\n\nTo use the API, you need to take your access you got during the creation of your account on Woop platform.\n\nThe current offered version is <b>Version 1.1.0</b>",
    "version": "1.1.1"
  },
  "tags": [
    {
      "name": "Order"
    }
  ],
  "paths": {
    "/orders/{orderId}/carrier": {
      "put": {
        "tags": [
          "Order"
        ],
        "operationId": "putOrderCarrier",
        "description": "A method to receive the notification when a carrier is selected to achieve a delivery.",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains informations about the selected carrier",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Delivery ID"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Order reference"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Order ID"
                  },
                  "trackingPageUrl": {
                    "type": "string",
                    "description": "Link to tracking page"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  },
                  "price": {
                    "$ref": "#/components/schemas/price"
                  },
                  "carrier": {
                    "$ref": "#/components/schemas/carrier"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "trackingPageUrl",
                  "vehicleType",
                  "price",
                  "carrier"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "deliveryId": "4qz64zd5qdq",
                    "externalReference": "6546465-FH",
                    "orderId": "zd8qz4dq4dz6q",
                    "trackingPageUrl": "https://url_suivi_livraison",
                    "vehicleType": "VEHICLE_TYPE_BIKE",
                    "price": {
                      "value": 36.5,
                      "currency": "EUR"
                    },
                    "carrier": {
                      "name": "Transporteur A",
                      "contact": {
                        "firstName": "Michel",
                        "lastName": "Dupont",
                        "phone": "+33600000000",
                        "email": "michel.dupont@mail.fr"
                      },
                      "specifications": {
                        "updateOrder": true,
                        "cancelOrder": false,
                        "carrierLabel": true,
                        "storageCapacity": true,
                        "weightMin": {
                          "value": 5,
                          "unit": "kg"
                        },
                        "weightMax": {
                          "value": 50,
                          "unit": "kg"
                        },
                        "ditanceMax": {
                          "value": 5,
                          "unit": "m"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing or incorrect elements in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The information can no longer be comminucated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orderId' can not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive notification of the selected carrier for an order"
      },
      "parameters": [
        {
          "$ref": "./retailer_to_woop.v1.4.0.json#/components/parameters/pathOrderId"
        }
      ]
    },
    "/orders/{orderId}/status": {
      "put": {
        "tags": [
          "Order"
        ],
        "operationId": "putOrderStatus",
        "description": "A method to receive the status update from the carrier",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains informations about de status update",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/putOrderStatus"
                  },
                  {
                    "$ref": "#/components/schemas/putDeliveryStatus"
                  }
                ]
              },
              "examples": {
                "Order status": {
                  "value": {
                    "orderId": "5z8d4q465zdq65d",
                    "status": "ORDER_CREATED",
                    "date": "2019-11-27T12:00:00+0000"
                  }
                },
                "Delivery status": {
                  "value": {
                    "deliveryId": "kzqfq41q561gq5ge1q5",
                    "orderId": "5z8d4q465zdq65d",
                    "status": "DELIVERY_STARTED",
                    "date": "2019-11-27T12:00:00+0000",
                    "comment": "Ceci est un commentaire utile.",
                    "team": {
                      "members": [
                        {
                          "id": "q6z4qz4dq"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing or incorrect elements in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The information can no longer be comminucated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orderId' does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive notification of status update for a delivery"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID"
        }
      ]
    },
    "/orders/{orderId}/score": {
      "put": {
        "tags": [
          "Order"
        ],
        "operationId": "putOrderScore",
        "description": "A method to receive a notification when a customer put a score on a delivery",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains informations about the score",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "orderId": {
                    "type": "string",
                    "description": "Order ID"
                  },
                  "score": {
                    "type": "array",
                    "description": "Score",
                    "items": {
                      "$ref": "#/components/schemas/score"
                    }
                  },
                  "comment": {
                    "type": "string",
                    "description": "Free comment"
                  }
                },
                "required": [
                  "orderId",
                  "score",
                  "comment"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "orderId": "54s54z65z4r14e6",
                    "score": [
                      {
                        "note": 9,
                        "type": "SCORE_TYPE_SATISFACTION"
                      }
                    ],
                    "comment": "J'ai été très satisfaite de ma livraison !"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing or incorrect elements in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The information can no longer be communicated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 403,
                      "error": "Forbidden",
                      "message": "Store doesn't exist or is inactive"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orderId' does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive customer notation on a delivery"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID"
        }
      ]
    },
    "/orders/{orderId}/deliveryClosure": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "postOrderDeliveryClosure",
        "description": "A method to receive billing informations on a delivery",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains billing informations",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryId": {
                    "type": "string",
                    "description": "Delivery ID"
                  },
                  "externalReference": {
                    "type": "string",
                    "description": "Order reference"
                  },
                  "orderId": {
                    "type": "string",
                    "description": "Order ID"
                  },
                  "billedDistance": {
                    "$ref": "#/components/schemas/length"
                  },
                  "emittedCarbonDioxide": {
                    "$ref": "#/components/schemas/mass"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  }
                },
                "required": [
                  "deliveryId",
                  "orderId",
                  "billedDistance",
                  "emittedCarbonDioxide",
                  "vehicleType"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "deliveryId": "654eg65ze4g65z",
                    "externalReference": "564654-FT",
                    "orderId": "a54efa65e4a",
                    "billedDistance": {
                      "value": 56.85,
                      "unit": "m"
                    },
                    "emittedCarbonDioxide": {
                      "value": 12.3,
                      "unit": "g"
                    },
                    "vehicleType": "VEHICLE_TYPE_TRUCK"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing or incorrect elements in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The information can no longer be communicated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Specified 'orderId' does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive billing informations on a delivery"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID"
        }
      ]
    },
    "/orders/{orderId}/events": {
      "post": {
        "tags": [
          "Order"
        ],
        "operationId": "postOrderEvents",
        "description": "A method to reveive event notification about an order",
        "parameters": [
          {
            "$ref": "#/components/parameters/pathOrderId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains informations about event",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "boolean",
                    "description": "Indicates whether the event was sent correctly to the customer"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "EVENT_TYPE_SMS",
                      "EVENT_TYPE_MAIL",
                      "EVENT_TYPE_CALL"
                    ],
                    "description": "Event type"
                  },
                  "date": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Event date"
                  },
                  "subject": {
                    "type": "string",
                    "enum": [
                      "TECHNICAL_DELIVERY_PICKUP_SOON",
                      "DELIVERY_INIT",
                      "DELIVERY_STARTED",
                      "DELIVERY_PICK_UP_REACHED",
                      "DELIVERY_PICK_UP_OK",
                      "DELIVERY_IN_PROGRESS",
                      "DELIVERY_AT_DROP_OF_LOCATION",
                      "DELIVERY_PICK_UP_FAILED",
                      "DELIVERY_DELIVERED_WITH_CLAIM",
                      "DELIVERY_CANCELLED_WITH_RETURN",
                      "DELIVERY_FAILED_WITH_RETURN",
                      "DELIVERY_RETURNED_TO_PICK_UP",
                      "DELIVERY_DELIVERED_OK",
                      "DELIVERY_CANCELLED",
                      "DELIVERY_BLOCKED",
                      "DELIVERY_DELAYED",
                      "DELIVERY_AVAILABLE"
                    ],
                    "description": "Event subject"
                  },
                  "message": {
                    "type": "string",
                    "description": "Message send to customer"
                  },
                  "failReason": {
                    "type": "string",
                    "description": "Failed reason if status is false"
                  },
                  "sender": {
                    "type": "string",
                    "description": "Message sender"
                  }
                },
                "required": [
                  "status",
                  "type",
                  "date",
                  "subject",
                  "message",
                  "sender"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "status": true,
                    "type": "EVENT_TYPE_MAIL",
                    "date": "2019-11-27T12:00:00+0000",
                    "subject": "DELIVERY_DELAYED",
                    "message": "Je vais avoir 15min de retard.",
                    "sender": "sender@mail.fr"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed successfully"
          },
          "400": {
            "description": "Missing or incorrect elements in the request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reasons": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "Missing argument 'xxxxx'"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The information can no longer be communicated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                }
              }
            }
          },
          "404": {
            "description": "Specified 'orderId' does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "./retailer_to_woop.v1.4.0.json#/components/schemas/errorCode"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "statusCode": 404,
                      "error": "Not Found",
                      "message": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Receive events about an order"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true,
          "description": "Order ID"
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "score": {
        "title": "Delivery notation (score)",
        "type": "object",
        "x-examples": {
          "Example": {
            "note": 5,
            "type": "SCORE_TYPE_RECOMMENDATION"
          }
        },
        "description": "Corresponds to the delivery notation by the customer",
        "properties": {
          "note": {
            "type": "number",
            "description": "Score"
          },
          "type": {
            "type": "string",
            "enum": [
              "SCORE_TYPE_RECOMMENDATION",
              "SCORE_TYPE_SATISFACTION"
            ],
            "description": "Score type"
          }
        },
        "required": [
          "note",
          "type"
        ]
      },
      "contact": {
        "title": "Contact (contact)",
        "type": "object",
        "x-examples": {
          "Example": {
            "firstName": "John",
            "lastName": "Doe",
            "phone": "+33610101010",
            "email": "johndoe@mail.com"
          }
        },
        "description": "Picking/Delivery contact informations",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Contact firstname"
          },
          "lastName": {
            "type": "string",
            "description": "Contact lastname"
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number"
          },
          "email": {
            "type": "string",
            "description": "Contact email"
          }
        },
        "required": [
          "phone",
          "email"
        ]
      },
      "orderStatus": {
        "type": "string",
        "enum": [
          "ORDER_CREATED",
          "ORDER_UPDATED",
          "ORDER_TO_BE_COMPLETED",
          "ORDER_WITH_NO_CARRIER_ELIGIBLE",
          "ORDER_TO_BE_QUOTED",
          "ORDER_QUOTED",
          "ORDER_WITH_NO_QUOTE",
          "ORDER_QUOTE_TO_BE_CONFIRMED",
          "ORDER_TO_BE_SENT_TO_CARRIER",
          "ORDER_WITH_NO_CARRIER_AVAILABLE",
          "ORDER_REFUSED_DELIVERY",
          "ORDER_TO_DELIVER",
          "ORDER_BEING_DELIVERED",
          "ORDER_DELIVERY_UNCOMPLETED",
          "ORDER_DELIVERED",
          "ORDER_CANCELLED"
        ],
        "title": "Order status (orderStatus)",
        "description": "Specifies the order status",
        "x-examples": {
          "Example": "ORDER_CREATED"
        }
      },
      "deliveryStatus": {
        "type": "string",
        "enum": [
          "DELIVERY_STARTED",
          "DELIVERY_PICK_UP_REACHED",
          "DELIVERY_PICK_UP_OK",
          "DELIVERY_PICK_UP_PARTIALLY",
          "DELIVERY_IN_PROGRESS",
          "DELIVERY_AT_DROP_OF_LOCATION",
          "DELIVERY_PICK_UP_FAILED",
          "DELIVERY_DELIVERED_WITH_CLAIM",
          "DELIVERY_CANCELLED_WITH_RETURN",
          "DELIVERY_FAILED_WITH_RETURN",
          "DELIVERY_RETURNED_TO_PICK_UP",
          "DELIVERY_DELIVERED_OK",
          "DELIVERY_DELIVERED_PARTIALLY",
          "DELIVERY_REPLANNED"
        ],
        "title": "Delivery status (deliveryStatus)",
        "x-examples": {
          "Example": "DELIVERY_STARTED"
        },
        "description": "Specifies the different possible delivery statuses in the platform"
      },
      "length": {
        "title": "Dimension (length)",
        "x-examples": {
          "Example": {
            "value": 200,
            "unit": "mm"
          }
        },
        "type": "object",
        "description": "Specifies the package dimension",
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/lengthUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "mass": {
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnit"
          }
        },
        "title": "Weight (mass)",
        "x-examples": {
          "Example": {
            "value": 1,
            "unit": "kg"
          }
        },
        "description": "Specifies the package/product weight"
      },
      "lengthUnit": {
        "type": "string",
        "description": "Specifies the length unit of measure",
        "enum": [
          "mm",
          "cm",
          "m",
          "in",
          "ft-us",
          "ft",
          "mi"
        ],
        "title": "Unit of measure (lengthUnit)",
        "x-examples": {
          "Example": "mm"
        }
      },
      "massUnit": {
        "type": "string",
        "description": "Specifies the weight unit",
        "enum": [
          "mcg",
          "mg",
          "g",
          "kg",
          "oz",
          "lb",
          "mt",
          "t"
        ],
        "title": "Weight unit (massUnit)",
        "x-examples": {
          "Example": "mcg"
        },
        "example": "g"
      },
      "vehicleType": {
        "type": "string",
        "enum": [
          "VEHICLE_TYPE_BIKE",
          "VEHICLE_TYPE_SCOOTER",
          "VEHICLE_TYPE_E_SCOOTER",
          "VEHICLE_TYPE_VAN_SMALL",
          "VEHICLE_TYPE_E_VAN_SMALL",
          "VEHICLE_TYPE_VAN_MEDIUM",
          "VEHICLE_TYPE_PEDESTRIAN",
          "VEHICLE_TYPE_TRUCK",
          "VEHICLE_TYPE_VAN_BIG",
          "VEHICLE_TYPE_E_VAN_BIG",
          "VEHICLE_TYPE_BIKE_CARGO",
          "VEHICLE_TYPE_CAR",
          "VEHICLE_TYPE_E_CAR",
          "VEHICLE_TYPE_UNKNOWN"
        ],
        "title": "Vehicule type (vehicleType)",
        "x-examples": {
          "Example": "VEHICLE_TYPE_BIKE"
        },
        "description": "Define the vehicule used for the delivery"
      },
      "currency": {
        "type": "string",
        "description": "Specifies the currency used",
        "enum": [
          "EUR"
        ],
        "title": "Currency (currency)",
        "x-examples": {
          "Example": "EUR"
        }
      },
      "team": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        },
        "title": "Team (team)",
        "x-examples": {
          "Example": {
            "members": [
              {
                "id": "176867"
              }
            ]
          }
        },
        "description": "Information about the team that contributed to the delivery"
      },
      "price": {
        "title": "Price (price)",
        "x-examples": {
          "Example": {
            "value": 20,
            "currency": "EUR"
          }
        },
        "type": "object",
        "description": "Corresponds to the selling price of the products",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "description": "Price value"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "required": [
          "value",
          "currency"
        ]
      },
      "carrier": {
        "title": "Carrier (carrier)",
        "x-examples": {
          "Example": {
            "name": "Bpost",
            "contact": {
              "firstName": "John",
              "lastName": "Doe",
              "phone": "+33610101010",
              "email": "johndoe@mail.com"
            },
            "specifications": {
              "updateOrder": true,
              "cancelOrder": false,
              "carrierLabel": true,
              "storageCapacity": true,
              "weightMin": {
                "value": 5,
                "unit": "kg"
              },
              "weightMax": {
                "value": 50,
                "unit": "kg"
              },
              "ditanceMax": {
                "value": 5,
                "unit": "km"
              }
            }
          }
        },
        "type": "object",
        "description": "Specifies the required informations for the carrier",
        "properties": {
          "name": {
            "type": "string",
            "description": "Carrier name"
          },
          "contact": {
            "$ref": "#/components/schemas/contact"
          },
          "specifications": {
            "$ref": "#/components/schemas/specifications"
          }
        },
        "required": [
          "name",
          "contact",
          "specifications"
        ]
      },
      "putDeliveryStatus": {
        "title": "Update delivery status (putDeliveryStatus)",
        "type": "object",
        "description": "Update the delivery status",
        "properties": {
          "deliveryId": {
            "type": "string",
            "description": "Delivery ID"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID"
          },
          "status": {
            "$ref": "#/components/schemas/deliveryStatus"
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "description": "Date of modification"
          },
          "comment": {
            "type": "string",
            "description": "Free comment"
          },
          "team": {
            "$ref": "#/components/schemas/team"
          },
          "additionalData": {
            "$ref": "#/components/schemas/additionalData"
          },
          "appointment": {
            "$ref": "#/components/schemas/appointment"
          }
        },
        "required": [
          "deliveryId",
          "orderId",
          "status",
          "date",
          "comment"
        ]
      },
      "putOrderStatus": {
        "title": "Update order status (putOrderStatus)",
        "type": "object",
        "description": "Update of the order status",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID"
          },
          "date": {
            "type": "string",
            "format": "datetime",
            "description": "Date of modification"
          },
          "status": {
            "$ref": "#/components/schemas/orderStatus"
          }
        },
        "required": [
          "orderId",
          "date",
          "status"
        ]
      },
      "additionalData": {
        "title": "Additional data",
        "type": "object",
        "description": "Allows you to receive personalized information/data from the carrier.",
        "properties": {
          "key": {
            "type": "string",
            "description": "Title of information received"
          },
          "value": {
            "type": "string",
            "description": "Value of information received"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "x-examples": {
          "example": {
            "key": "string",
            "value": "string"
          }
        }
      },
      "appointment": {
        "description": "Specifies an interval of dates with times for customer appointments.",
        "type": "object",
        "x-examples": {
          "example": {
            "start": "2019-05-02T15:52:01+0000",
            "end": "2019-05-02T17:52:01+0000"
          }
        },
        "properties": {
          "start": {
            "type": "string",
            "minLength": 1,
            "description": "Beginning of the slot"
          },
          "end": {
            "type": "string",
            "minLength": 1,
            "description": "End of the slot"
          }
        },
        "required": [
          "start",
          "end"
        ],
        "title": "Date of appointment"
      },
      "specifications": {
        "description": "List of characteristics recorded for a carrier on an order.",
        "type": "object",
        "x-examples": {
          "example": {
            "updateOrder": true,
            "cancelOrder": true,
            "carrierLabel": true,
            "storageCapacity": true,
            "weightMin": {
              "value": 0,
              "unit": "string"
            },
            "weightMax": {
              "value": 0,
              "unit": "string"
            },
            "ditanceMax": {
              "value": 0,
              "unit": "string"
            }
          }
        },
        "title": "Specifications",
        "properties": {
          "updateOrder": {
            "type": "boolean",
            "description": "Indicates whether the order change is authorized"
          },
          "cancelOrder": {
            "type": "boolean",
            "description": "Indicates whether order cancellation is allowed"
          },
          "carrierLabel": {
            "type": "boolean",
            "description": "Indicates if the carrier has a transport label."
          },
          "storageCapacity": {
            "type": "boolean",
            "description": "Indicates whether the carrier has storage capacity"
          },
          "weightMin": {
            "$ref": "#/components/schemas/weight"
          },
          "weightMax": {
            "$ref": "#/components/schemas/weight"
          },
          "distanceMax": {
            "$ref": "#/components/schemas/distance"
          }
        },
        "required": [
          "updateOrder",
          "cancelOrder",
          "carrierLabel",
          "storageCapacity",
          "weightMin",
          "weightMax",
          "distanceMax"
        ]
      },
      "weight": {
        "description": "Specifies the allowed weight",
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ],
        "x-examples": {
          "example": {
            "value": 5,
            "unit": "kg"
          }
        },
        "title": "Weight"
      },
      "distance": {
        "description": "Specifies the distance between two points.",
        "type": "object",
        "x-examples": {
          "exemple": {
            "value": 5,
            "unit": "km"
          }
        },
        "title": "Distance",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/distanceUnit"
          }
        },
        "required": [
          "value",
          "unit"
        ]
      },
      "distanceUnit": {
        "type": "string",
        "title": "Distance unit",
        "x-examples": {
          "Exemple": "string"
        },
        "description": "Specifies the unit of measurement for distance calculation.",
        "enum": [
          "m",
          "km"
        ]
      }
    },
    "parameters": {
      "pathOrderId": {
        "in": "path",
        "description": "Order ID",
        "name": "orderId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "servers": []
}